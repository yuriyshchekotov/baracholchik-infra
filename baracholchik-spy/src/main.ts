import fs from "fs";
import path from "path";
import { TelegramClient } from "telegram";
import { StringSession } from "telegram/sessions";
import { NewMessage } from "telegram/events";
import type { NewMessageEvent } from "telegram/events";
import promptSync from "prompt-sync";
import dotenv from "dotenv";

// Load environment variables first
dotenv.config();

console.log(">> TARGET_CHATS =", process.env.TARGET_CHATS);

const apiId = Number(process.env.API_ID);
const apiHash = process.env.API_HASH!;
const sessionFile = path.resolve(process.env.SESSION || "anon.txt");
let session: StringSession;

if (fs.existsSync(sessionFile)) {
    const sessionString = fs.readFileSync(sessionFile, "utf8").trim();
    if (sessionString && sessionString.length > 0) {
        try {
            session = new StringSession(sessionString);
            console.log(">> –°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞.");
        } catch (error) {
            console.log(">> –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Å—Å–∏–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é:", error);
            session = new StringSession("");
        }
    } else {
        console.log(">> –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –ø—É—Å—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.");
        session = new StringSession("");
    }
} else {
    console.log(">> –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.");
    session = new StringSession("");
}

const sourceChat = process.env.SOURCE_CHAT!;
const sourceTag = process.env.SOURCE_TAG;
const rawTargetChats = process.env.TARGET_CHATS;
if (!rawTargetChats) {
    throw new Error("TARGET_CHATS is not defined in .env");
}
const targetChats = rawTargetChats.split(",").map((s) => s.trim()).filter(Boolean);

async function main() {
    const client = new TelegramClient(session, apiId, apiHash, {
        connectionRetries: 5,
    });

    const prompt = promptSync();

    await client.start({
        phoneNumber: async () => prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ")!,
        password: async () => prompt("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å): "),
        phoneCode: async () => prompt("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: "),
        onError: (err) => console.error(err),
    });

    const sessionData = (session as StringSession).save();
    fs.writeFileSync(sessionFile, sessionData);
    console.log(">> –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª:", sessionFile);

    console.log(">> –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!");
    console.log(">> –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:", client.session.save());

    await client.sendMessage("me", { message: "–Ø –æ–Ω–ª–∞–π–Ω (–±–æ—Ç-–ø–µ—Ä–µ—Å—ã–ª–∫–∞)" });

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    client.addEventHandler(async (event: NewMessageEvent) => {
        const message = event.message;

        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç
        console.log(">> –°–æ–±—ã—Ç–∏–µ NewMessage:");
        console.log(" - raw text:", message.message);
        console.log(" - sender ID:", message.senderId?.toString());
        console.log(" - chat ID:", message.chatId?.toString());

        if (message.out) {
            console.log(" - –ø—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ");
            return;
        }

        const chat = await message.getChat();
        const chatId = (chat as any)?.username || (chat as any)?.id?.toString();
        console.log(" - –ø–æ–ª—É—á–µ–Ω —á–∞—Ç:", chatId);

        const messageId = message.id;
        const link = `https://t.me/${sourceTag}/${messageId}`;
        const text = `${message.message || ""}\n\nüîó ORIGIN: ${link}`;
        console.log(`>> –ü–æ—Å—Ç—É–ø–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"`);

        for (const target of targetChats) {
            await client.sendMessage(target.trim(), { message: text });
            console.log(`>> –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤: ${target}`);
        }
    }, new NewMessage({}));

    console.log(`>> –ë–æ—Ç —Å–ª—É—à–∞–µ—Ç —á–∞—Ç: ${sourceChat}`);
}

main().catch((err) => {
    console.error("‚ÄºÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:", err);
    process.exit(1);
});
